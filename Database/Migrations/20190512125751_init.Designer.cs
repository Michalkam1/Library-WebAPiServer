// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20190512125751_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Database.Entities.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOrder");

                    b.Property<DateTime>("DateReturn");

                    b.Property<DateTime>("DateTake");

                    b.Property<DateTime>("DateTermin");

                    b.Property<int?>("LibraryItemsId");

                    b.Property<int>("OwnerId");

                    b.Property<int>("StatusesId");

                    b.HasKey("Id");

                    b.HasIndex("LibraryItemsId");

                    b.HasIndex("StatusesId");

                    b.ToTable("ItemStatuses");
                });

            modelBuilder.Entity("Database.Entities.LibraryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId");

                    b.Property<string>("Cover");

                    b.Property<DateTime>("IssueYear");

                    b.Property<int>("ItemType");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("LibraryItem");
                });

            modelBuilder.Entity("Database.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Statuses");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Database.Entities.ItemStatus", b =>
                {
                    b.HasOne("Database.Entities.LibraryItem", "LibraryItems")
                        .WithMany()
                        .HasForeignKey("LibraryItemsId");

                    b.HasOne("Database.Entities.Status", "Statuses")
                        .WithMany()
                        .HasForeignKey("StatusesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Entities.LibraryItem", b =>
                {
                    b.HasOne("Database.Entities.Author", "Author")
                        .WithMany("LibraryItems")
                        .HasForeignKey("AuthorId");
                });
#pragma warning restore 612, 618
        }
    }
}
