using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace ClientWebApp.Controllers
{
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IAuthorController
    {
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorDTO>> GetAllAsync();

        System.Threading.Tasks.Task<FileResponse> PostAsync(AuthorDTO authorDTO);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AuthorController : Controller//Microsoft.AspNetCore.Mvc.ApiController
    {
        private IAuthorController _implementation;

        public AuthorController(IAuthorController implementation)
        {
            _implementation = implementation;
        }

        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/Author")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorDTO>> GetAll()
        {
            return _implementation.GetAllAsync();
        }

        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Author")]
        public System.Threading.Tasks.Task<FileResponse> Post([Microsoft.AspNetCore.Mvc.FromBody] AuthorDTO authorDTO)
        {
            return _implementation.PostAsync(authorDTO);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface ILibraryItemsController
    {
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LibraryItemDTO>> GetAllAsync();

        System.Threading.Tasks.Task<FileResponse> PostItemsAsync(LibraryItemDTO libItem);

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LibraryItemDTO>> GetAsync(int? itemId, string id);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class LibraryItemsController : Controller//Microsoft.AspNetCore.Mvc.ApiController
    {
        private ILibraryItemsController _implementation;

        public LibraryItemsController(ILibraryItemsController implementation)
        {
            _implementation = implementation;
        }

        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/LibraryItems")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LibraryItemDTO>> GetAll()
        {
            return _implementation.GetAllAsync();
        }

        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/LibraryItems")]
        public System.Threading.Tasks.Task<FileResponse> PostItems([Microsoft.AspNetCore.Mvc.FromBody] LibraryItemDTO libItem)
        {
            return _implementation.PostItemsAsync(libItem);
        }

        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/LibraryItems/{Id}")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LibraryItemDTO>> Get(int? itemId, string id)
        {
            return _implementation.GetAsync(itemId, id);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AuthorDTO
    {
        [Newtonsoft.Json.JsonConstructor]
        public AuthorDTO(string @firstName, int @id, string @lastName, System.Collections.Generic.List<LibraryItemDTO> @libraryItems)
        {
            this.Id = @id;
            this.FirstName = @firstName;
            this.LastName = @lastName;
            this.LibraryItems = @libraryItems;
        }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; }

        [Newtonsoft.Json.JsonProperty("libraryItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LibraryItemDTO> LibraryItems { get; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LibraryItemDTO
    {
        [Newtonsoft.Json.JsonConstructor]
        public LibraryItemDTO(AuthorDTO @author, string @cover, int @id, System.DateTimeOffset @issueYear, LibraryItemType @itemType, string @title)
        {
            this.Id = @id;
            this.Author = @author;
            this.ItemType = @itemType;
            this.Cover = @cover;
            this.IssueYear = @issueYear;
            this.Title = @title;
        }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; }

        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthorDTO Author { get; }

        [Newtonsoft.Json.JsonProperty("itemType", Required = Newtonsoft.Json.Required.Always)]
        public LibraryItemType ItemType { get; }

        [Newtonsoft.Json.JsonProperty("cover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cover { get; }

        [Newtonsoft.Json.JsonProperty("issueYear", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset IssueYear { get; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LibraryItemType
    {
        DVD = 1,

        CD = 2,

        Book = 3,

    }

    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108